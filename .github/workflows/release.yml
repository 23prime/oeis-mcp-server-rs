name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  APP_NAME: oeis-mcp-server-rs

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (musl)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: false
            asset_name: oeis-mcp-server-x86_64-unknown-linux-musl

          # Linux aarch64 (musl)
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
            asset_name: oeis-mcp-server-aarch64-unknown-linux-musl

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            asset_name: oeis-mcp-server-x86_64-apple-darwin

          # macOS aarch64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            asset_name: oeis-mcp-server-aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux x86_64)
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt update -qq
          sudo apt install -y musl-tools

      - name: Install cross
        if: ${{ matrix.cross }}
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary (native)
        if: ${{ !matrix.cross }}
        run: cargo build --release --target=${{ matrix.target }}

      - name: Build binary (cross)
        if: ${{ matrix.cross }}
        run: cross build --release --target=${{ matrix.target }}

      - name: Prepare asset
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ env.APP_NAME }} dist/${{ matrix.asset_name }}
          chmod +x dist/${{ matrix.asset_name }}

      - name: Create tarball
        run: |
          cd dist
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.asset_name }}.tar.gz
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name '*.tar.gz' -exec cp {} release-assets/ \;
          ls -lah release-assets/

      - name: Extract version from tag
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum ./*.tar.gz > SHA256SUMS
          cat SHA256SUMS

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            release-assets/*.tar.gz
            release-assets/SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
